volumes:
  op_geth_data:
  op_node_data:
  jwt_shared:
  config_data:

services:
  # ========================================
  # OPTIMISM NODE SERVICES
  # ========================================
  op-init:
    image: alpine:latest
    command:
      - sh
      - -c
      - |
        set -e

        # Create config directory
        mkdir -p /config

        # Download genesis.json for op-geth if it doesn't exist
        echo 'Checking for genesis file'
        if [ ! -f '/config/genesis.json' ]; then
          echo 'Downloading genesis file'
          if ! wget -O '/config/genesis.json' 'https://fsn1.your-objectstorage.com/golem-base/kaolin/genesis.json'; then
            echo 'ERROR: Failed to download genesis file'
            exit 1
          fi
          echo 'Genesis file downloaded successfully'
        else
          echo 'Genesis file already exists, skipping download'
        fi

        # Download rollup.json for op-node if it doesn't exist
        echo 'Checking for rollup config'
        mkdir -p /op-node/rollup
        if [ ! -f '/op-node/rollup/rollup.json' ]; then
          echo 'Downloading op-node rollup config'
          if ! wget -O '/op-node/rollup/rollup.json' 'https://fsn1.your-objectstorage.com/golem-base/kaolin/rollup.json'; then
            echo 'ERROR: Failed to download rollup config'
            exit 1
          fi
          echo 'Rollup config downloaded successfully'

          # Set proper permissions only if we downloaded new files
          chmod -R 777 /op-node
          chmod -R 777 /config
        else
          echo 'Rollup config already exists, skipping download'
        fi

        # Generate JWT secret if it doesn't exist
        if [ ! -f '/jwt/jwt' ]; then
          echo 'Generating JWT secret'
          mkdir -p /jwt
          # Generate a 32-byte random hex string for JWT secret
          apk add --no-cache openssl
          openssl rand -hex 32 > /jwt/jwt
          chmod 666 /jwt/jwt
          echo 'JWT secret generated successfully'
        else
          echo 'JWT secret already exists, skipping generation'
        fi
    volumes:
      - op_node_data:/op-node
      - config_data:/config
      - jwt_shared:/jwt

  op-geth-init:
    image: quay.io/golemnetwork/gb-op-geth:v1.101503.1-laika
    depends_on:
      op-init:
        condition: service_completed_successfully
    entrypoint: []
    command:
      - /bin/sh
      - -c
      - |
        set -e
        if [ ! -f '/geth/geth' ]; then
          echo 'Initializing geth data directory with genesis block...'

          # Use genesis file from op-init
          if ! geth init --state.scheme=hash --datadir='/geth' '/config/genesis.json'; then
            echo 'ERROR: Failed to initialize geth with genesis block'
            exit 1
          fi
          echo 'Geth initialized successfully with genesis block'
        else
          echo 'Geth data directory already initialized, skipping initialization'
        fi
    volumes:
      - op_geth_data:/geth
      - config_data:/config

  op-geth:
    image: quay.io/golemnetwork/gb-op-geth:v1.101503.1-laika
    restart: unless-stopped
    stop_grace_period: 5m
    depends_on:
      op-geth-init:
        condition: service_completed_successfully
    command:
      - --networkid=600106
      - --datadir=/geth
      - --http
      - --http.corsdomain=*
      - --http.vhosts=*
      - --http.addr=0.0.0.0
      - --http.port=8545
      - --http.api=debug,eth,txpool,net,engine,web3,golembase,txpool
      - --ws
      - --ws.addr=0.0.0.0
      - --ws.port=8546
      - --ws.origins=*
      - --ws.api=debug,eth,txpool,net,engine,web3,golembase,txpool
      - --syncmode=snap
      - --authrpc.vhosts=*
      - --authrpc.addr=0.0.0.0
      - --authrpc.port=8551
      - --authrpc.jwtsecret=/jwt/jwt
      - --usb=false
      - --state.scheme=hash
      - --nat=none
      - --bootnodes=enode://687a6635ff7a3bbac3e5ef8f9972605b3c3006e946ff8cc5d612285e7f61631dde94e8a2bd6480b8550cb255b3dfa65708eca83d4b32869c4e3eb5c2d327442c@116.202.192.224:31800,enode://1251e1c94950320ac1ed0e922dca272cf8094d3ac19d35b77bef00173681313a414226e1a5c15d46957cafd937bfa8d5c2190b73480a1f149857a28447f7c2bc@116.202.193.109:31801,enode://cf2dafeedcd2935e12d23b60d8d1e83e1c6e1c4285cc343b7be541edfdcb37876085e00dd0cc268d1742832c21cd377b2a3011b1ab0b3ec41f8bdf1073b2fd45@116.202.192.224:31803
    ports:
      - 8545:8545
      - 8546:8546
    volumes:
      - op_geth_data:/geth
      - jwt_shared:/jwt

  op-node:
    image: us-docker.pkg.dev/oplabs-tools-artifacts/images/op-node:v1.13.0
    restart: unless-stopped
    stop_grace_period: 5m
    depends_on:
      op-init:
        condition: service_completed_successfully
      op-geth:
        condition: service_started
    command:
      - op-node
      - --l1=https://rpc.l2.holesky.golem-base.io
      - --l1.beacon.ignore=true
      - --l1.rpckind=standard
      - --l1.trustrpc
      - --l2=http://op-geth:8551
      - --l2.enginekind=geth
      - --l2.jwt-secret=/jwt/jwt
      - --rpc.addr=0.0.0.0
      - --rpc.port=9545
      - --p2p.nat=true
      - --p2p.ban.peers=false
      - --p2p.bootnodes=enr:-J64QGHe6a-z50mevtop0osgGW4nfSJ3vIvFyIcb_xJsnA8qPywM7iXolo2tfCE_um4DAjxyv-4Vtw1ZjrN5Wqg4LRSGAZbZRtabgmlkgnY0gmlwhHTKwOCHb3BzdGFja4Se1CQAiXNlY3AyNTZrMaEDGiDPvWTQS2GuTLHsK2UqCLIucmiV9SG6LmYBIhOxmnSDdGNwgnxKg3VkcIJ8Sg,enr:-J64QMMhQ3uRU7UNR53cDDxGVE-k-nQnZJ429cGh7VBv__X6VnhNAZW0_8nTVAVPEBxdIjynv_aNA8LOMfGvJVdgut-GAZbZRtqZgmlkgnY0gmlwhHTKwW2Hb3BzdGFja4Se1CQAiXNlY3AyNTZrMaEDjp5SGulI3HGl9hk8y2XdEm9KJqOs07VzuCcJotJbtheDdGNwgnxMg3VkcIJ8TA,enr:-J64QEYeRadwnve91KV1I01veth1zFMdoc13D8yREwSlH5MrTQxd8fsq_12uA3SL1obBm7PmvnCinRVm5M6sF2pul72GAZbZRtbqgmlkgnY0gmlwhHTKwOCHb3BzdGFja4Se1CQAiXNlY3AyNTZrMaED43Ibcr5auPez1g9My_iIX5yIP2mQNim5QdW7h2uuggaDdGNwgnxOg3VkcIJ8Tg
      - --p2p.listen.tcp=9222
      - --p2p.listen.udp=9222
      - --metrics.enabled
      - --metrics.addr=0.0.0.0
      - --metrics.port=7300
      - --syncmode=execution-layer
      - --rollup.config=/op-node/rollup/rollup.json
      - --log.level=info
    ports:
      - 9545:9545
    volumes:
      - jwt_shared:/jwt
      - op_node_data:/op-node
